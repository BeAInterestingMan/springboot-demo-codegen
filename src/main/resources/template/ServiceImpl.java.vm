package com.yuantu.admin.${moduleName}.service.impl;

import com.yuantu.admin.${moduleName}.${className}Service;
import com.yuantu.admin.${moduleName}.mapper.${className}Mapper;
import com.yuantu.admin.${moduleName}.vo.${className}VO;
import com.yuantu.admin.${moduleName}.entity.${className}Entity;
import com.yuantu.admin.${moduleName}.vo.${className}Query;
import com.yuantu.admin.base.query.Page;
import com.yuantu.admin.base.exception.*;
import org.springframework.beans.BeanUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

/**
 * <p>
 * ${comments}
 * </p>
 *
 * @package: ${package}.${moduleName}.service.impl
 * @description: ${comments}
 * @author: ${author}
 * @date: Created in ${datetime}
 * @copyright: Copyright (c) ${year}
 * @version: V1.0
 * @modified: ${author}
 */
@Service("${classname}Service")
public class ${className}ServiceImpl implements ${className}Service {

    private static final Logger logger = LoggerFactory.getLogger(${className}ServiceImpl.class);

    @Resource
    private ${className}Mapper ${classname}Mapper;

    /**
    * 分页查询
    * @param
    * @return
    */
    public Page<${className}Entity> queryByPage(${className}Query ${classname}Query){
        ${className}Entity ${classname}Entity = transformQuery(${classname}Query);
        Integer totalCount = ${classname}Mapper.count(${classname}Entity);
        List<${className}Entity> lists = new ArrayList<${className}Entity>(totalCount);
        if(totalCount > 0){
            lists = ${classname}Mapper.selectByPage(${classname}Query);
        }
        return new Page(totalCount,${classname}Query.getPageNumber(),${classname}Query.getPageSize(),lists);
    }

    /**
    * 根据条件查询
    * @param
    * @return
    */
    public List<${className}Entity> queryByCondition(${className}VO ${classname}VO){
        ${className}Entity ${classname}Entity = transformVO(${classname}VO);
        Integer totalCount = ${classname}Mapper.count(${classname}Entity);
        List<${className}Entity> lists = new ArrayList<${className}Entity>(totalCount);
        if(totalCount > 0){
            lists = ${classname}Mapper.selectByCondition(${classname}Entity);
        }
        return lists;
    }

    /**
    * 通过id查询
    * @param
    * @return
    */
    public ${className}Entity queryById(Long id){
        return ${classname}Mapper.selectById(id);
    }

    /**
    * 新增
    * @param
    * @return
    */
    public Boolean save(${className}VO ${classname}VO){
        ${className}Entity ${classname}Entity = transformVO(${classname}VO);
        Integer res = 0;
        try {
          res = ${classname}Mapper.insert(${classname}Entity);
        } catch (Exception e) {
          logger.error("插入${className}数据失败======>{}",e);
          throw new MySQLException();
        }
        return res == 1 ? true :false;
    }

    /**
    * 修改
    * @param
    * @return
    */
    public Boolean updateById(${className}VO ${classname}VO){
        ${className}Entity ${classname}Entity = transformVO(${classname}VO);
        Integer res = 0;
        try {
          res = ${classname}Mapper.update(${classname}Entity);
        } catch (Exception e) {
          logger.error("修改${className}数据失败======>{}",e);
          throw new MySQLException();
        }
        return res == 1 ? true :false;
    }

    /**
    * 物理删除
    * @param id
    * @return
    */
    public Boolean deleteById(Long id){
        Integer res = 0;
        try {
          res = ${classname}Mapper.delete(id);
        } catch (Exception e) {
          logger.error("删除${className}数据失败======>{}",e);
          throw new MySQLException();
        }
        return res == 1 ? true :false;
    }

    /**
    * vo 转换为 entity
    * @param
    */
    private ${className}Entity transformVO(${className}VO ${classname}VO){
        ${className}Entity ${classname}Entity = new ${className}Entity();
        BeanUtils.copyProperties(${classname}VO, ${classname}Entity);
        return ${classname}Entity;
    }

    /**
    * query 转换为 entity
    * @param
    */
    private ${className}Entity transformQuery(${className}Query ${classname}Query){
            ${className}Entity ${classname}Entity = new ${className}Entity();
        BeanUtils.copyProperties(${classname}Query,${classname}Entity);
        return ${classname}Entity;
    }
}
